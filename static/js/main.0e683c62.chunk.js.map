{"version":3,"sources":["languages.ts","../../src/constants/TriggerKeys.ts","../../src/util/suggestions-util.ts","../../src/index.tsx","../../src/util/caret-util.ts","../../src/util/touch-util.ts","App.tsx","index.tsx"],"names":["languages","label","value","TriggerKeys","getTransliterateSuggestions","a","numOptions","showCurrentWordAsLastSuggestion","lang","url","lastWord","fetch","res","data","found","console","ReactTransliterate","renderComponent","props","React","offsetX","offsetY","onChange","onChangeText","onBlur","onKeyDown","containerClassName","containerStyles","activeItemStyles","maxOptions","hideSuggestionBoxOnMobileDevices","hideSuggestionBoxBreakpoint","triggerKeys","insertCurrentSelectionOnBlur","enabled","rest","useState","inputRef","useRef","width","height","shouldRenderSuggestions","useMemo","windowSize","reset","setSelection","setOptions","handleSelection","index","currentString","newValue","options","matchEnd","setTimeout","elem","caretPos","matchStart","setCaretPosition","e","target","renderSuggestions","handleResize","window","setWindowSize","useEffect","style","position","className","el","caret","getInputSelection","start","end","selectionEnd","input","getCaretCoordinates","indexOfLastSpace","setMatchStart","setMatchEnd","currentWord","rect","top","left","Math","setTop","setLeft","event","selection","navigator","ref","classes","undefined","onMouseEnter","onClick","key","item","App","text","setText","setLang","map","l","htmlFor","placeholder","id","Input","fullWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e683c62.chunk.js","sourcesContent":["export const languages = [\n  { label: \"Amharic\", value: \"am\" },\n  { label: \"Arabic\", value: \"ar\" },\n  { label: \"Bangla\", value: \"bn\" },\n  { label: \"Belarusian\", value: \"be\" },\n  { label: \"Bulgarian\", value: \"bg\" },\n  { label: \"Chinese (Hong Kong)\", value: \"yue-hant\" },\n  { label: \"Chinese (Simplified)\", value: \"zh\" },\n  { label: \"Chinese (Traditional)\", value: \"zh-hant\" },\n  { label: \"French\", value: \"fr\" },\n  { label: \"German\", value: \"de\" },\n  { label: \"Greek\", value: \"el\" },\n  { label: \"Gujarati\", value: \"gu\" },\n  { label: \"Hebrew\", value: \"he\" },\n  { label: \"Hindi\", value: \"hi\" },\n  { label: \"Italian\", value: \"it\" },\n  { label: \"Japanese\", value: \"ja\" },\n  { label: \"Kannada\", value: \"kn\" },\n  { label: \"Malayalam\", value: \"ml\" },\n  { label: \"Marathi\", value: \"mr\" },\n  { label: \"Nepali\", value: \"ne\" },\n  { label: \"Odia\", value: \"or\" },\n  { label: \"Persian\", value: \"fa\" },\n  { label: \"Portuguese (Brazil)\", value: \"pt\" },\n  { label: \"Punjabi\", value: \"pa\" },\n  { label: \"Russian\", value: \"ru\" },\n  { label: \"Sanskrit\", value: \"sa\" },\n  { label: \"Serbian\", value: \"sr\" },\n  { label: \"Sinhala\", value: \"si\" },\n  { label: \"Spanish\", value: \"es\" },\n  { label: \"Tamil\", value: \"ta\" },\n  { label: \"Telugu\", value: \"te\" },\n  { label: \"Tigrinya\", value: \"ti\" },\n  { label: \"Ukrainian\", value: \"uk\" },\n  { label: \"Urdu\", value: \"ur\" },\n  { label: \"Vietnamese\", value: \"vi\" },\n];\n","export const TriggerKeys = {\n  KEY_RETURN: 13,\n  KEY_ENTER: 14,\n  KEY_TAB: 9,\n  KEY_SPACE: 32,\n};\n","export const getTransliterateSuggestions = async (\n  lastWord: string,\n  numOptions = 5,\n  showCurrentWordAsLastSuggestion = false,\n  lang = \"hi\",\n) => {\n  // fetch suggestion from api\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n  const url = `https://inputtools.google.com/request?text=${lastWord}&itc=${lang}-t-i0-und&num=${numOptions}&cp=0&cs=1&ie=utf-8&oe=utf-8&app=demopage`;\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    if (data && data[0] === \"SUCCESS\") {\n      const found = showCurrentWordAsLastSuggestion\n        ? [...data[1][0][1], lastWord]\n        : data[1][0][1];\n      return found;\n    }\n  } catch (e) {\n    // catch error\n    console.error(\"There was an error with transliteration\", e);\n    return [];\n  }\n};\n","import * as React from \"react\";\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\nimport getCaretCoordinates from \"textarea-caret\";\nimport classes from \"./styles.module.css\";\nimport { ReactTransliterateProps } from \"./interfaces/Props\";\nimport { Language } from \"./types/Language\";\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\n\nconst KEY_UP = 38;\nconst KEY_DOWN = 40;\nconst KEY_ESCAPE = 27;\n\nconst OPTION_LIST_Y_OFFSET = 10;\nconst OPTION_LIST_MIN_WIDTH = 100;\n\nexport const ReactTransliterate = ({\n  renderComponent = (props) => <input {...props} />,\n  lang = \"hi\",\n  offsetX = 0,\n  offsetY = 10,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange = () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChangeText = () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onBlur = () => {},\n  value,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onKeyDown = () => {},\n  containerClassName = \"\",\n  containerStyles = {},\n  activeItemStyles = {},\n  maxOptions = 5,\n  hideSuggestionBoxOnMobileDevices = false,\n  hideSuggestionBoxBreakpoint = 450,\n  triggerKeys = [\n    TriggerKeys.KEY_SPACE,\n    TriggerKeys.KEY_ENTER,\n    TriggerKeys.KEY_RETURN,\n    TriggerKeys.KEY_TAB,\n  ],\n  insertCurrentSelectionOnBlur = true,\n  showCurrentWordAsLastSuggestion = true,\n  enabled = true,\n  ...rest\n}: ReactTransliterateProps): JSX.Element => {\n  const [options, setOptions] = useState<string[]>([]);\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [selection, setSelection] = useState<number>(0);\n  const [matchStart, setMatchStart] = useState(-1);\n  const [matchEnd, setMatchEnd] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n\n  const shouldRenderSuggestions = useMemo(\n    () =>\n      hideSuggestionBoxOnMobileDevices\n        ? windowSize.width > hideSuggestionBoxBreakpoint\n        : true,\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\n  );\n\n  const reset = () => {\n    // reset the component\n    setSelection(0);\n    setOptions([]);\n  };\n\n  const handleSelection = (index: number) => {\n    const currentString = value;\n    // create a new string with the currently typed word\n    // replaced with the word in transliterated language\n    if (typeof currentString !== \"string\") return;\n    const newValue =\n      currentString.substring(0, matchStart) +\n      options[index] +\n      \" \" +\n      currentString.substring(matchEnd + 1, currentString.length);\n\n    // set the position of the caret (cursor) one character after the\n    // the position of the new word\n    setTimeout(() => {\n      setCaretPosition(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inputRef.current!,\n        matchStart + options[index].length + 1,\n      );\n    }, 1);\n\n    // bubble up event to the parent component\n    const e = ({ target: { value: newValue } } as unknown) as React.FormEvent<\n      HTMLInputElement\n    >;\n    onChangeText(newValue);\n    onChange(e);\n    reset();\n    return inputRef.current?.focus();\n  };\n\n  const renderSuggestions = async (lastWord: string) => {\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n    // fetch suggestion from api\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n    const numOptions = showCurrentWordAsLastSuggestion\n      ? maxOptions - 1\n      : maxOptions;\n\n    const data = await getTransliterateSuggestions(\n      lastWord,\n      numOptions,\n      showCurrentWordAsLastSuggestion,\n      lang,\n    );\n    setOptions(data);\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n\n    // bubble up event to the parent component\n    onChange(e);\n    onChangeText(value);\n\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n\n    // get the current index of the cursor\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\n    const input = inputRef.current;\n\n    if (!input) return;\n\n    const caretPos = getCaretCoordinates(input, caret);\n\n    // search for the last occurence of the space character from\n    // the cursor\n    const indexOfLastSpace =\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\n        ? value.lastIndexOf(\"\\n\", caret - 1)\n        : value.lastIndexOf(\" \", caret - 1);\n\n    // first character of the currently being typed word is\n    // one character after the space character\n    // index of last character is one before the current position\n    // of the caret\n    setMatchStart(indexOfLastSpace + 1);\n    setMatchEnd(caret - 1);\n\n    // currentWord is the word that is being typed\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\n    if (currentWord && enabled) {\n      // make an api call to fetch suggestions\n      renderSuggestions(currentWord);\n\n      const rect = input.getBoundingClientRect();\n      // console.log(\"caretPos\", caretPos.top);\n      // console.log(\"rect\", rect.height);\n      // console.log(\"input\", input.scrollHeight);\n      // console.log(\"offset\", input.offsetTop, input.scrollHeight);\n\n      // get the position of the top left corner of the suggestion box\n      // and save it to state\n      // const top =\n      //   caretPos.top < rect.height\n      //     ? caretPos.top + input.offsetTop\n      //     : input.scrollHeight + input.offsetTop - caretPos.top;\n\n      const top =\n        caretPos.top < rect.height\n          ? caretPos.top + input.offsetTop\n          : rect.height -\n            ((input.scrollHeight - caretPos.top) % rect.height) +\n            input.offsetTop;\n\n      const left = Math.min(\n        caretPos.left + input.offsetLeft - OPTION_LIST_Y_OFFSET,\n        input.offsetLeft + rect.width - OPTION_LIST_MIN_WIDTH,\n      );\n\n      setTop(top);\n      setLeft(left);\n    } else {\n      reset();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const helperVisible = options.length > 0;\n\n    if (helperVisible) {\n      if (triggerKeys.includes(event.keyCode)) {\n        event.preventDefault();\n        handleSelection(selection);\n      } else {\n        switch (event.keyCode) {\n          case KEY_ESCAPE:\n            event.preventDefault();\n            reset();\n            break;\n          case KEY_UP:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_DOWN:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          default:\n            onKeyDown(event);\n            break;\n        }\n      }\n    } else {\n      onKeyDown(event);\n    }\n  };\n\n  const handleBlur = (\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (!isTouchEnabled()) {\n      if (insertCurrentSelectionOnBlur && options[0]) {\n        handleSelection(0);\n      } else {\n        reset();\n      }\n    }\n    onBlur(event);\n  };\n\n  const handleResize = () => {\n    // TODO implement the resize function to resize\n    // the helper on screen size change\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return (\n    <div\n      // position relative is required to show the component\n      // in the correct position\n      style={{\n        ...containerStyles,\n        position: \"relative\",\n      }}\n      className={containerClassName}\n    >\n      {renderComponent({\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        ref: inputRef,\n        value: value,\n        ...rest,\n      })}\n      {shouldRenderSuggestions && options.length > 0 && (\n        <ul\n          style={{\n            left: `${left + offsetX}px`,\n            top: `${top + offsetY}px`,\n            position: \"absolute\",\n            width: \"auto\",\n          }}\n          className={classes.ReactTransliterate}\n        >\n          {options.map((item, index) => (\n            <li\n              className={index === selection ? classes.Active : undefined}\n              style={index === selection ? activeItemStyles || {} : {}}\n              onMouseEnter={() => {\n                setSelection(index);\n              }}\n              onClick={() => handleSelection(index)}\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport type { ReactTransliterateProps, Language };\nexport { TriggerKeys, getTransliterateSuggestions };\n","export function getInputSelection(el: HTMLInputElement) {\n  const start = 0;\n  const end = 0;\n\n  if (!el) {\n    return { start, end };\n  }\n\n  if (\n    typeof el.selectionStart === \"number\" &&\n    typeof el.selectionEnd === \"number\"\n  ) {\n    return { start: el.selectionStart, end: el.selectionEnd };\n  }\n\n  /**\n   * IE specific code\n   * TS throws error so is commented out\n   */\n\n  // if (!document) {\n  //   return { start, end };\n  // }\n\n  // const range = document.selection.createRange();\n\n  // if (!range && range.parentElement() !== el) {\n  //   return { start, end };\n  // }\n\n  // const len = el.value.length;\n  // const normalizedValue = el.value.replace(/\\r\\n/g, \"\\n\");\n  // const textInputRange = el.createTextRange();\n\n  // textInputRange.moveToBookmark(range.getBookmark());\n\n  // const endRange = el.createTextRange();\n\n  // endRange.collapse(false);\n\n  // if (textInputRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n  //   start = end = len;\n  // } else {\n  //   start = -textInputRange.moveStart(\"character\", -len);\n  //   start += normalizedValue.slice(0, start).split(\"\\n\").length - 1;\n\n  //   if (textInputRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n  //     end = len;\n  //   } else {\n  //     end = -textInputRange.moveEnd(\"character\", -len);\n  //     end += normalizedValue.slice(0, end).split(\"\\n\").length - 1;\n  //   }\n  // }\n\n  return { start, end };\n}\n\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\n  if (elem) {\n    /**\n     * IE specific code\n     * TS throws error so is commented out\n     */\n    // if (elem.createTextRange) {\n    //   const range = elem.createTextRange();\n\n    //   range.move(\"character\", caretPos);\n    //   range.select();\n    // } else {\n    //   if (elem.selectionStart) {\n    //     elem.focus();\n    //     elem.setSelectionRange(caretPos, caretPos);\n    //   } else {\n    //     elem.focus();\n    //   }\n    // }\n\n    if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else {\n      elem.focus();\n    }\n  }\n}\n","export function isTouchEnabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import React, { useState } from \"react\";\n\n// language list for example only\nimport { languages } from \"./languages\";\n\n// import component\nimport { ReactTransliterate, Language } from \"react-transliterate\";\nimport \"react-transliterate/dist/index.css\";\n\n// Material Ui input component\nimport Input from \"@material-ui/core/Input\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n\n  const [lang, setLang] = useState<Language>(\"hi\");\n\n  return (\n    <div className=\"container\">\n      <h2>React transliterate</h2>\n\n      <select\n        className=\"language-dropdown\"\n        value={lang}\n        onChange={(e) => setLang(e.target.value as Language)}\n      >\n        {languages.map((l) => (\n          <option key={l.value} value={l.value}>\n            {l.label}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-input\">Using input</label>\n      <ReactTransliterate\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-input\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-textarea\">Using textarea</label>\n      <ReactTransliterate\n        renderComponent={(props) => <textarea {...props} />}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-textarea\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-material-ui-input\">\n        Using Material UI input\n      </label>\n      <ReactTransliterate\n        renderComponent={(props) => {\n          const inputRef = props.ref;\n\n          delete props[\"ref\"];\n\n          return <Input fullWidth {...props} inputRef={inputRef} />;\n        }}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-material-ui-input\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}